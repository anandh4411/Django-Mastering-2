# <-- PART 1 - REST APIs -->

1. What is RESTful API?
    * it's an interface for client apps (frontend) to access data
    * API has different endpoints for performing different tasks
    * eg: endpoint to add product, delete product, update orders etc.
    * client app sent request to this endpoint
    * our API endpoint sends a response back.

    * What makes an API RESTFUL?
    * Representational State Transfer (REST)
    * There are some rules for servers and clients to communicate over internet
    * those APIs who confirms to this rule is called RESTful API
    * The main 3 concepts are -> Resources, Representations, HTTP Methods.

2. Resources
    * are some objects eg: products, collections, orders etc
    * client apps can access them using a url (uniform resource locator)
    * eg: https://anandh.xyz/reviews/1

3. Resource Representations
    * when a client request for a resource eg: product
    * we need represent that resource in a format and give it to the client
    * it may be in html, xml (old), json (modern) format
    * server side representation is different
    * in django, we represent a resourse as a model or a class
    * but when we send that resource to a client, we makes it a json or other format
    * # we uses json the most (javascript object notation)
    * # they are key value pairs and keys will be strings ""
    * {
        "name" : "Anandh",
        "age" : 21
      }

4. HTTP Methods
    * get -> get resource
    * post -> create resource
    * put -> update resource
    * patch -> for updating part of it (like subset of properties)
    * delete -> delete resource
    
    * eg: while creating product, we sends a post request to api endpoint
    * in body of the request we should have a json object with product details
    
    * eg: while updating all properties of product -> put request with id
    * eg: while updating only some properties of product -> patch request with id
    * url: /products/1

    * for deleting, we just need the id which is included in the url
    * no body is required

5. Installing django REST framework
    * it is a seperate framework the sits on top of django
    * using this we can easily build rest apis using django
    * pip install djangorestframework
    * after installing, add to installed apps in settings.py
    * 'rest_framework',

6. Creating API views
    * in views.py create a function with parameter request
    * def product_list(request):
        pass
    * from django.http import HttpResponse
    * inside view function, return an HttpResponse('Hey')
    * then map this view function with a url pattern
    
    * in django, we have two classes HttpResponse, HttpRequest
    * in djangorestframework it has it's own Response, Request classes
    * which is simpler and more powerful than django's

    * for using them
    * form rest_framework.decorators import api_view
    * then apply this decorator to our view function '@api_view()'
    * from this point, the parameter of that view function, request
    * will be an instance of restframework's Request class
    * now lets use the response class also
    * from rest_framework.response import Response
    * then simple replace HttpResponse with Response
    * that's it - test it in browser
    * # this new page is called browsable api
    * helps to test our api endpoints in browser
    * if a client app hits this api, this page is not gonna get visible
    * it's only visible if we hits it in a browser

    * on the page, the title we see is the name of our view function
    * then which king of request we send (get)
    * then http status (http 200 ok) 200  means ok
    * then allowed methods, option method -> used to see all available methods of api
    * content-type -> which type of data is in the response (application/json)
    * Vary -> used for caching (will talk in future)
    * then finaly, the body of response.

    * # for creating url with parameters:
      path('products/<id>/', views.product_detail),
    * then go to view function, add a new parameter to it
      def product_detail(request, id):
    * now everything works but
    * if someone types alphabet instead of id int values, it will work
    * but it shoudn't
    * for solving that, 
      path('products/<int:id>/', views.product_detail),
    * we added int: converter to our parameter

7. Creating Serializers
    * now after creating the view
    * instead of return an http response, we need to return oru product objects
    * in a json format
    
    * # in djangorestframework we have a class named JSONRenderer
    * this class has a method called render(dictionary)
    * it takes a dictionary object and converts it into a json object

    * if we convert our product object into a python dictionary
    * we can pass that dictionary into the render function and get json 
    * This is were serializers come into picture

    * # Serializer converts a model instance into a python dictionary
    * first create a file named serializers.py in our app
    * from rest_framework import serializers 
    * serializers module is imported
    * now create a class for our model, here product
    * class ProductSerialzer(serializers.Serializer):
    * it is inherited form Serializer
    
    * now we need to decide which fields should we serialize and pass through the api
    * because not all the fields belongs to the external representation
    * some attributes or fields contains sensitive information, and it is internal re
    * so we don't want to display it to the client
    * after selecting the fileds, define it just like we did in model class
    * instead of model, we uses serializer.
    * # id = serializer.IntegerField()
    * for finding all the fields available, go to django-rest-framework.org
    * under api guide, see serializer fields.
    * there are some attributes also available like readonly, writeonly etc
    * # title = serializer.CharField(max_length=255)
    * we passed max_lenght=255 here because
    * we will use this serializer also for recieving products
    * so we want make sure that recieved product's title won't exceed 255
    * will talk more later
    * # unit_price = serializers.DecimalField(max_digits=6, decimal_places=2)
    * the field names can be anything, no need to mach the model
    * so we can set it to price also. but for consistency let it be unit_price
    * that's it. Serializer is ready, now we need to serialize some model objects